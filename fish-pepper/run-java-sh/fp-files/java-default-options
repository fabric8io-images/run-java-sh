#!/bin/sh
# =================================================================
# Detect whether running in a container and set appropriate options
# for limiting Java VM resources
#
# Usage: JAVA_OPTIONS="$(java-default-options.sh)"

# Env Vars evaluated:

# JAVA_OPTIONS: Checked for already set options
# JAVA_MAX_MEM_RATIO: Ratio use to calculate a maximum Memory, in percent.
#                     E.g. the value "50" implies that 50% of the Memory
#                     given to the container is used as the maximum heap memory with
#                     '-Xmx'.
#                     For a good overviews what tuning options are available -->
#                             https://youtu.be/Vt4G-pHXfs4
#                             https://www.youtube.com/watch?v=w1rZOY5gbvk
#                             https://vimeo.com/album/4133413/video/181900266
# Note that heap is only a small portion of the memory used by a JVM. There are lot
# of other memory areas (metadata, thread, code cache, ...) which add to the overall
# size. When your container gets killed because of an OOM, then you should tune
# the absolute values.

# Check for memory options and calculate a sane default if not given
heap_size() {
  # Check whether -Xmx is already given in JAVA_OPTIONS
  if echo "${JAVA_OPTIONS}" | grep -q -- "-Xmx"; then
    return
  fi

  # Check for the 'real memory size' and calculate Xmx from the ratio
  if [ "x$CONTAINER_MAX_MEMORY" != x -a "x$JAVA_MAX_MEM_RATIO" != x ]; then
    local max_mem="${CONTAINER_MAX_MEMORY}"
    local ratio="${JAVA_MAX_MEM_RATIO}"
    local mx=$(echo "${max_mem} ${ratio} 1048576" | awk '{printf "%d\n" , ($1*$2)/(100*$3) + 0.5}')
    echo "-Xmx${mx}m"
  fi
}

memory_options() {
  echo "-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap $(heap_size)"
}

# Switch on diagnostics except when switched off
diagnostics() {
  if [ "x$JAVA_DIAGNOSTICS" != "x" ]; then
    echo "-XX:NativeMemoryTracking=summary -XX:+PrintGC -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UnlockDiagnosticVMOptions"
  fi
}

cpu_options() {
  local core_limit="${JAVA_CORE_LIMIT}"
  if [ "x$core_limit" = "x0" ]; then
    return
  fi

  if [ "x$CONTAINER_CORE_LIMIT" != x ]; then
    if [ "x$core_limit" = x ]; then
      core_limit="${CONTAINER_CORE_LIMIT}"
    fi
    echo "-XX:ParallelGCThreads=${core_limit} " \
         "-XX:ConcGCThreads=${core_limit} " \
         "-Djava.util.concurrent.ForkJoinPool.common.parallelism=${core_limit}"
  fi
}

# These parameters are necessary when running parallel GC if you want to use the Min and Max Heap Free ratios.
# -XX:GCTimeRatio=4
# -XX:AdaptiveSizePolicyWeight=90
gc_options() {
    echo "-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -XX:+ExitOnOutOfMemoryError $(heap_ratio)"
}

#-XX:MinHeapFreeRatio=20  These parameters tell the heap to shrink aggressively and to grow conservatively.
#-XX:MaxHeapFreeRatio=40  Thereby optimizing the amount of memory available to the operating system.
heap_ratio() {
  echo "-XX:MinHeapFreeRatio=20 -XX:MaxHeapFreeRatio=40"
}

# Echo options, trimming trailing and multiple spaces
echo "$(memory_options) $(diagnostics) $(cpu_options) $(gc_options)" | awk '$1=$1'
